----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-03T20:50:52.923237821+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: gettext-sys
  version: 0.21.0
  revision: 78b75bc82d45493b9a66ec5429fa9451daf324fa
  digest: M1n8cJSsg4_V5YBywZoqYduJgvRQuMxwpgu1ZV22zWI
review:
  thoroughness: high
  understanding: high
  rating: strong
comment: |-
  This is basically a self-review, since it's me who fixed the problems
  I highlighted in my previous review.
  
  The crate now bundles an up-to-date version of GNU gettext, which is nice.
  
  The documentation now features a prominent warning about the bundled
  library's license, LGPL.
  
  This release added one new binding and some workarounds for build issues. All
  of that looks good to me (but remember that I'm the author of those changes).
  
  The crate is now even more solid than before.
----- SIGN CREV PROOF -----
o1PAIHYmzkUByiSIk-WoTPgcUWd3EKDNmcMjVOnLQvVgphh1k8Q4n8OvslfZWR8Fd2GX6AOLHvSSzbr77regBw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-03T20:55:13.710248388+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: gettext-rs
  version: 0.6.0
  revision: bc6b043ba9a64acb11564c22a5dcc318bd74accc
  digest: cOvjfD2qdO5iIFQUfK4TytnaQhjsN_4IRKHpeBTbbns
review:
  thoroughness: high
  understanding: high
  rating: strong
comment: |-
  This is basically a self-review, since it's me who fixed the problems
  I highlighted in my previous review.
  
  This crate contains safe FFI bindings for gettext.
  
  The memory issues I mentioned in the previous review are fixed, and panics
  documented. There are no `unwrap`s, and all errors are propagated via
  `Result`s.
  
  The crate still depends on gettext returning UTF-8, but this is now
  prominently documented.
  
  Compared to 0.5.0, the API is more fleshed out and polished (even if I say so
  myself).
----- SIGN CREV PROOF -----
skSsOLAZeXoCiX65cNhvmjTu3y9XPxvTVFX1laAbhsYRLUm6ThVry2gCMx1E8ltm5L0ukjYxAA3xXqY5wjt4BA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-04T02:39:38.622368966+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: remove_dir_all
  version: 0.5.3
  revision: 0c218dad77262fbf47483d128feebb2770a8c05e
  digest: ltL2xkeGeGdvI4bRC3Zf47MxRRRpS83d4GERoSl4544
review:
  thoroughness: low
  understanding: low
  rating: positive
comment: |-
  I'm not a Windows programmer; I merely took a peek to see if the crate is
  blatantly malicious, and it looks like it isn't.
  
  The code is well-commented. Uses `unsafe` sparingly, just to call WinAPI — no
  high-performance tricks. Some comments refer to alignment issues, which shows
  the amount of thought that went into the code; nice.
----- SIGN CREV PROOF -----
uEpkGiMdYOMPFiexcB1srwdsE1ox2XnBNgEoXdGbCH4fHisX4kFvbzlF816_WlyVLo05-u2OxtksACfMdpAdDg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-11T01:27:56.626442349+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: scratch
  version: 1.0.0
  revision: d9b7679377951ec21ec9a52da466e89f04a9deaf
  digest: f4HBOJc2rdzbFa3tVrL2oapoPR5jZlOfHflgkFWC8fk
review:
  thoroughness: high
  understanding: high
  rating: strong
comment: |-
  Trivial (but useful!) crate that creates a temporary directory which can be
  seen by any crate that depends on this one.
  
  There are just 6 lines of actual code here. They read OUT_DIR from
  environment, and create/remove some directories.
  
  A rogue crate could include this one and use it to stomp on some other
  crate's scratch space. It's hard for me to see this as a vulnerability, since
  the user is supposed to trust the code they're running during the build.
----- SIGN CREV PROOF -----
_4FPKgLBTZENocbSMP68DkKgWRaE60yS2l3Ht6DJYsvYmQGUFYa1ok3bHRTZiQ3GHxeb13mJKbgRCeQFbgdQCg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-11T01:40:25.433021751+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: winapi-i686-pc-windows-gnu
  version: 0.4.0
  digest: 8BsjRXHqrrNVolIuivkuUQwrFendQmVRDZihn1P-1t4
review:
  thoroughness: low
  understanding: high
  rating: positive
comment: |-
  This crate vendors various WinAPI libraries for i686. All it does is add
  a library search path to Cargo, pointing at a directory full of .a files
  (static libraries).
  
  I didn't actually verify where the libraries come from, and if they match
  their origin; that's why I cap thoroughness at "low", and rating at
  "positive".
----- SIGN CREV PROOF -----
hSxCYQXdXgsywl1n276amam5FyeWur1nZ4enqlvwqoFSeuqJIjao6BFeZD4OWtf0QTTuAlbvlFzx0cLSuV7ADw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-11T01:48:18.037785449+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: link-cplusplus
  version: 1.0.4
  revision: adf048bcec5ad2cb6ac8a6eb5ed214b5adc1e7b2
  digest: Z5uk8dCZ-K9ej2dASC1nwzuarGwth_5YnUF2Jk6iEKo
review:
  thoroughness: high
  understanding: high
  rating: strong
comment: |-
  Another tiny-yet-useful crate. Lets the users request which C++ stdlib they'd
  like to link to. If nobody cares, or if there are conflicting choices, it
  punts the choice to the "cc" crate which picks the platform default.
  
  I don't see anything suspicious here, and don't see a way to trick this crate
  into doing something bad, thus a strong rating.
----- SIGN CREV PROOF -----
rDGn04v76QYN4TCaFzuSfCVFKse5FzQVykefgoyGugb3TduHz4zOmdGtrK8N78bRSCIcmpdORyI4j_Wt7RSTBA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-11T02:07:28.089006051+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: malloc_buf
  version: 0.0.6
  digest: x2abx0p2ctaESaod4uoWSmNiIiW0c1PegaYIvwTRTK8
review:
  thoroughness: high
  understanding: high
  rating: strong
comment: |-
  This is a tiny wrapper over a raw pointer allocated by malloc; this crate
  provides a slice-like interface and ensures that the pointer is free()d when
  the wrapper is dropped.
  
  This looks solid to me.
----- SIGN CREV PROOF -----
c0I5dsDiSQA2XTZ8BOmpgXVvjBotgYt0FIaAww33LAxvs-gV3gALfmjrRPXgHD66781RBPOQuVpgu_i4YGCOAg
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-11T02:57:10.029070364+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: tap
  version: 1.0.0
  revision: a12cfee6e1333872800a81fe55f0078bc0a08c88
  digest: InQg4xkTI7d_21fEy8mExHmI5eUlDk1l160vC5i4osI
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  This crate provides three pieces of plumbing that makes it easier to chain
  functions:
  
  1. "taps", which pass the borrowed value into a function and then return it
     (think logging);
  2. "pipes", which are basically a universal `map()`;
  3. "conv", which is like `into()` but lets you specify the target type, so
     you can put it in the middle of a call-chain.
  
  A lot of pretty boring code. It looks all right to me, but I got too lazy to
  check why functions usually require sized types; that's why I cap my
  "thoroughness" and "understanding" at "medium", and rating at "positive".
----- SIGN CREV PROOF -----
ZLAKtjGlXwVPErONgrc9wyb87usLMy7oyNw8_NX7lqfM_tdWYS5EdUkQ15rsvhewYN9WsbO86giW729JJeZPCQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-17T03:34:36.473759757+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: libc
  version: 0.2.89
  revision: 508f65a2f87968f14a2b815f1e5537f08c504907
  digest: SnKG8O4ekYUfl1kP5Rvg8p7Q6Y2efjCp-VwdP2bdqEk
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  This crate contains unsafe bindings to platform-specific C functions. The
  project has an expansive CI pipeline that runs ctest on Linux, macOS,
  FreeBSD, and Windows. Where possible, the testing is done on multiple
  architectures with different libc implementations.
  
  Most of the crate is marked unsafe, but that's just the nature of the beast.
  
  I only looked at one module, unix, so thoroughness is capped at "low".
  However, the crate comes from the same people who build Rust itself, so this
  doesn't affect the rating.
  
  Given it's just a list of declarations, which are then automatically checked,
  I'm fairly confident that this code does what it's supposed to do.
----- SIGN CREV PROOF -----
c65ohpLfPtHtxZFsJxfCMB1ttn7Apo_0rFxmrO3kgnyKX_AB4deXbJWMzBHLxOrtwe4OCmgT2Gd3K2gUCSE9CQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-20T15:35:51.806562748+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: libc
  version: 0.2.90
  revision: 9d710c1fe09d06215306fb3684b0b1628deafd9e
  digest: NucEvasf8YyKqJGEQXwCD48qtA8nLpW1w1jFkpAWZVs
package-diff-base:
  source: "https://crates.io"
  name: libc
  version: 0.2.89
  revision: 508f65a2f87968f14a2b815f1e5537f08c504907
  digest: SnKG8O4ekYUfl1kP5Rvg8p7Q6Y2efjCp-VwdP2bdqEk
review:
  thoroughness: medium
  understanding: medium
  rating: positive
comment: |-
  I checked that the delta from 0.2.89 doesn't add any suspicious code. It
  indeed doesn't. I trust that ctest in the project's CI checked that all new
  constants have the expected values, and that function signatures match C.
----- SIGN CREV PROOF -----
gXUJfhqLDaQvTOma7GaRREpgbxnNNL16xech9dzvMZmBi03bYqBBxKKS-0CcKDXymliyrWMsNAOJ-pPY6Oa_Bw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-03-24T01:01:58.992069829+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: libc
  version: 0.2.91
  revision: bd7e0522f7631a0be106fa3ea3f6f6d8ad514b66
  digest: RJhRlMK_ETLdQniw_qcKg8-naxZ2R9Br4DauNLPV2Uc
package-diff-base:
  source: "https://crates.io"
  name: libc
  version: 0.2.90
  revision: 9d710c1fe09d06215306fb3684b0b1628deafd9e
  digest: NucEvasf8YyKqJGEQXwCD48qtA8nLpW1w1jFkpAWZVs
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  Delta from 0.2.90 only adds a single constant to a couple modules and edits
  some docs. Looks okay to me. (As usual, I rely on the project's CI to check
  if the constant is correct, hence "thoroughness" is low).
----- SIGN CREV PROOF -----
q4wUNo_y-w9d-JJXxgq0loA3Sm8Wj5kWG1D2i0cCRnFGwKfL7rbDjLEkK5AHHO1hReEHeaBJ1E_IpeCX8E_LDg
----- END CREV PROOF -----

