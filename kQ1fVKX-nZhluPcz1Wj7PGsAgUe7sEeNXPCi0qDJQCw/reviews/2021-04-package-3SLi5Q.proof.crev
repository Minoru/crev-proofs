----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-04-07T20:58:43.545923152+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: libc
  version: 0.2.93
  revision: 3b185efb5ab36d25f4c1f87ce74ccce42ddd4743
  digest: 7LxyPS1PA87QUxb4rGEApEhyZAD8BiTiWKIQXC6LG_0
package-diff-base:
  source: "https://crates.io"
  name: libc
  version: 0.2.92
  revision: 77056408a1cab851d5d4f8c4fb903f102d8b7c65
  digest: jN981VF21ia5PqfZRV9ieLY4Z5aby2OI-TfGQvT23BQ
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  Delta from 0.2.92 consists mostly of two things: formatting changes, and
  modularisation of some architecture-specific constants for Linux.
  
  Packing was disabled for `arphdr` and `in_addr` on NetBSD. The commit message
  sounds convincing to me
  (https://github.com/rust-lang/libc/commit/ec13c82bc93070dfe1d81a359174e0495edfe487).
  
  There's also a hint at a new CI machinery that'll ensure the crate doesn't
  break semver.
  
  Overall this looks fine to me. As usual, I rely on the project's CI to check
  that the bindings match C, hence "thoroughness" is low.
----- SIGN CREV PROOF -----
60UKZihpQ7DK2_FpqvsJzlHMm_qljYgnX_xPFzbC5tLM__qqwTaHbCQsN3WTBHAlrrWqFcEYF9U_ARNLhgCUCA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-04-26T19:12:44.257339012+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: gettext-rs
  version: 0.7.0
  revision: 81ded1d817c4d384ff19df72ba20829a6642e345
  digest: dEquPXbxLERv9tQySljva_VjyzGX5npY8npiyFFb4Pw
review:
  thoroughness: high
  understanding: high
  rating: strong
comment: |-
  This is a self-review, because this release is made by me and contains only
  the changes that I made.
  
  The crate provides safe wrappers over an FFI for GNU gettext (which is
  packaged separately, as a gettext-sys crate). There are no known issues with
  those wrappers.
  
  This release fixes an incorrect default for XDG_DATA_DIRS. There are no
  security implications to this change, as far as I can see.
----- SIGN CREV PROOF -----
kunpRWKKEuvoprzxKz95xs1-UblxXxGhoj4bngrdNk7JfvSeLmrJCR3wBhdE0kIv4fBCrRWKE0lThwoiz5TxAw
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-04-27T12:45:01.097309842+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: libc
  version: 0.2.94
  revision: 50af40e2776fa3573bdf8071a3fe98cea41206da
  digest: "-6MoxTjTCuJ6m8VuvNHgzgWzFtQdzZvwfwGykkAyVjY"
package-diff-base:
  source: "https://crates.io"
  name: libc
  version: 0.2.93
  revision: 3b185efb5ab36d25f4c1f87ce74ccce42ddd4743
  digest: 7LxyPS1PA87QUxb4rGEApEhyZAD8BiTiWKIQXC6LG_0
review:
  thoroughness: low
  understanding: medium
  rating: positive
comment: |-
  Delta from 0.2.93 moves some TCP-related constants around, adds
  RLIMIT_NLIMITS constant, and provides a few new function bindings.
  
  This looks fine. "Thoroughness" for this review is "low" because I didn't
  manually check that the bindings match the headers — I trust that the CI
  checked that already.
----- SIGN CREV PROOF -----
IGufaW7pTNSNsyEoZPZfcP38pDKbCKlhdm1bmZpL2Z_QQkgWorLYefML0bts8ZF_OSlnL58YiEwGOADlF1QbCA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-04-28T14:42:31.120089910+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: adler
  version: 1.0.2
  revision: a94f525f62698d699d1fb3cc9112db8c35662b16
  digest: zWPz4nyNLm1aq3_slKvaZhXWySjaG0zb_x793by4b3M
review:
  thoroughness: high
  understanding: medium
  rating: positive
comment: |-
  This is an implementation of Adler-32 checksum. It has no `unsafe`, and the
  code is quite simple. The only complicated part is the algorithm itself, but
  there is a big comment explaining what's going on, and the structure of the
  code matches the explanation. I can't vouch the implementation is bug-free,
  but I'm sure it's sound and isn't malicious.
  
  Thoroughness is "high" because I read the whole crate quite attentively, but
  understanding is still "medium" since I didn't quite follow the math that
  enables vectorization in this crate. 
----- SIGN CREV PROOF -----
Ti1HvVAF-_RqDu55PuyXJSS0Cjrp-zHPXoi02Vyqw3NdQfSVM0xAOC7uUN3JMn4catAhP46t2O0MogPy7FyOAQ
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-04-28T15:22:40.167478668+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: fnv
  version: 1.0.7
  revision: 4b4784ebfd3332dc61f0640764d6f1140e03a9ab
  digest: zwIq6L987JORpY7sKIs9-cy-JSgFIiQXkccFGzvKZyM
review:
  thoroughness: high
  understanding: high
  rating: strong
comment: |-
  FNV is an extremely simple hashing algorithm. This crate implements a variant
  called FNV-1a.
  
  It uses no unsafe, and just basic arithmetic. Half the code is actually
  tests. I'm convinced that there are no bugs here, and definitely no malicious
  code.
----- SIGN CREV PROOF -----
euTnqWZMBFPtisIcRTND7I_cfZKxQT4A2Dg1WFngOvXIDYCVH_D4WhAV5Gvgj8rvJdSWMDOqldn_BeW_MjuHBA
----- END CREV PROOF -----

----- BEGIN CREV PROOF -----
kind: package review
version: -1
date: "2021-04-28T15:48:06.286320076+03:00"
from:
  id-type: crev
  id: kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw
  url: "https://github.com/Minoru/crev-proofs.git"
package:
  source: "https://crates.io"
  name: rand_xorshift
  version: 0.3.0
  revision: eae0a9b91c5de272706134d25bc1ea3457bc9670
  digest: CDFDUQhnO_m2KnLFEG5itYytHA2kyr3JdjfQHrW74wY
review:
  thoroughness: high
  understanding: medium
  rating: positive
comment: |-
  This implements a xorshift RNG with 128 bits of state.
  
  The implementation uses no unsafe, and does not even require std. The code is
  straightforward, and matches the code from the paper that describes the RNG
  ("Xorshift RNGs" by George Marsaglia).
  
  Seeding from an existing RNG can theoretically hang if the seeding RNG keeps
  returning zeroes. I filed https://github.com/rust-random/rngs/issues/24 about
  this and capped the rating at "positive".
----- SIGN CREV PROOF -----
h5aDwEZiDsl7l5k3bvJpaGnsh283seb7XQowxlNI5QheNlza2GUS9zgXKxa0cO5-Ko4rG0A3_tnk3JxjjtYFBg
----- END CREV PROOF -----

